{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "19fa0d64",
   "metadata": {
    "id": "19fa0d64"
   },
   "source": [
    "## Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "qAZ2ECplz4pO",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 7667,
     "status": "ok",
     "timestamp": 1699545656353,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "qAZ2ECplz4pO",
    "outputId": "aa4f6519-6932-4640-ee92-7d95602629a7",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: gurobipy in /Applications/anaconda3_new/anaconda3/lib/python3.11/site-packages (10.0.2)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install gurobipy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8f245fec",
   "metadata": {
    "id": "8f245fec"
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import gurobipy as gp\n",
    "from sklearn import model_selection\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import LassoCV, Lasso\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7c3137f",
   "metadata": {
    "id": "e7c3137f"
   },
   "source": [
    "## Reading in Training and Testing Set CSVs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "006f34bc",
   "metadata": {
    "id": "006f34bc"
   },
   "outputs": [],
   "source": [
    "training_data = pd.read_csv('training_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "abdd00e7",
   "metadata": {
    "id": "abdd00e7"
   },
   "outputs": [],
   "source": [
    "testing_data = pd.read_csv('test_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d86c83d",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 256
    },
    "executionInfo": {
     "elapsed": 201,
     "status": "ok",
     "timestamp": 1699545666190,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "1d86c83d",
    "outputId": "8926c357-3564-4b6d-c682-1eb1543a131f"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X7</th>\n",
       "      <th>X8</th>\n",
       "      <th>X9</th>\n",
       "      <th>...</th>\n",
       "      <th>X41</th>\n",
       "      <th>X42</th>\n",
       "      <th>X43</th>\n",
       "      <th>X44</th>\n",
       "      <th>X45</th>\n",
       "      <th>X46</th>\n",
       "      <th>X47</th>\n",
       "      <th>X48</th>\n",
       "      <th>X49</th>\n",
       "      <th>X50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.536145</td>\n",
       "      <td>-1.535413</td>\n",
       "      <td>0.718888</td>\n",
       "      <td>-2.099149</td>\n",
       "      <td>-0.442842</td>\n",
       "      <td>-0.598978</td>\n",
       "      <td>-1.642574</td>\n",
       "      <td>0.207755</td>\n",
       "      <td>0.760642</td>\n",
       "      <td>0.575874</td>\n",
       "      <td>...</td>\n",
       "      <td>0.361866</td>\n",
       "      <td>1.793098</td>\n",
       "      <td>-0.631287</td>\n",
       "      <td>-0.061751</td>\n",
       "      <td>0.511049</td>\n",
       "      <td>0.488754</td>\n",
       "      <td>-0.612772</td>\n",
       "      <td>-0.471045</td>\n",
       "      <td>-1.139781</td>\n",
       "      <td>-0.260773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.808344</td>\n",
       "      <td>-1.734609</td>\n",
       "      <td>0.551981</td>\n",
       "      <td>-2.147673</td>\n",
       "      <td>-1.552944</td>\n",
       "      <td>1.514910</td>\n",
       "      <td>-1.143972</td>\n",
       "      <td>0.737594</td>\n",
       "      <td>1.321243</td>\n",
       "      <td>-0.261684</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.677985</td>\n",
       "      <td>-0.165679</td>\n",
       "      <td>0.065405</td>\n",
       "      <td>0.137162</td>\n",
       "      <td>1.258197</td>\n",
       "      <td>-0.120834</td>\n",
       "      <td>-1.564834</td>\n",
       "      <td>-0.242565</td>\n",
       "      <td>-0.001827</td>\n",
       "      <td>1.187453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.530427</td>\n",
       "      <td>0.097257</td>\n",
       "      <td>0.107634</td>\n",
       "      <td>-0.194222</td>\n",
       "      <td>0.335454</td>\n",
       "      <td>-0.408199</td>\n",
       "      <td>0.133265</td>\n",
       "      <td>0.706179</td>\n",
       "      <td>0.394971</td>\n",
       "      <td>-0.437116</td>\n",
       "      <td>...</td>\n",
       "      <td>1.108801</td>\n",
       "      <td>0.333791</td>\n",
       "      <td>0.282055</td>\n",
       "      <td>-1.086294</td>\n",
       "      <td>-0.115354</td>\n",
       "      <td>0.257857</td>\n",
       "      <td>-0.088838</td>\n",
       "      <td>-0.751231</td>\n",
       "      <td>1.450609</td>\n",
       "      <td>0.290593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.428243</td>\n",
       "      <td>-0.067702</td>\n",
       "      <td>0.557836</td>\n",
       "      <td>0.700848</td>\n",
       "      <td>-1.121376</td>\n",
       "      <td>1.722274</td>\n",
       "      <td>0.613525</td>\n",
       "      <td>0.700909</td>\n",
       "      <td>-0.417976</td>\n",
       "      <td>1.069749</td>\n",
       "      <td>...</td>\n",
       "      <td>0.692511</td>\n",
       "      <td>-0.350990</td>\n",
       "      <td>0.624558</td>\n",
       "      <td>0.434520</td>\n",
       "      <td>-0.367409</td>\n",
       "      <td>-1.144681</td>\n",
       "      <td>-0.136524</td>\n",
       "      <td>-0.557214</td>\n",
       "      <td>0.416303</td>\n",
       "      <td>0.484495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.566694</td>\n",
       "      <td>0.488729</td>\n",
       "      <td>0.211483</td>\n",
       "      <td>0.568389</td>\n",
       "      <td>0.646837</td>\n",
       "      <td>0.163868</td>\n",
       "      <td>-0.002152</td>\n",
       "      <td>0.125137</td>\n",
       "      <td>0.493571</td>\n",
       "      <td>1.705451</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000605</td>\n",
       "      <td>1.075280</td>\n",
       "      <td>0.182281</td>\n",
       "      <td>-1.138458</td>\n",
       "      <td>0.106092</td>\n",
       "      <td>0.544640</td>\n",
       "      <td>-0.383487</td>\n",
       "      <td>-0.425773</td>\n",
       "      <td>2.667647</td>\n",
       "      <td>-0.050748</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          y        X1        X2        X3        X4        X5        X6  \\\n",
       "0  8.536145 -1.535413  0.718888 -2.099149 -0.442842 -0.598978 -1.642574   \n",
       "1  4.808344 -1.734609  0.551981 -2.147673 -1.552944  1.514910 -1.143972   \n",
       "2 -1.530427  0.097257  0.107634 -0.194222  0.335454 -0.408199  0.133265   \n",
       "3 -0.428243 -0.067702  0.557836  0.700848 -1.121376  1.722274  0.613525   \n",
       "4  0.566694  0.488729  0.211483  0.568389  0.646837  0.163868 -0.002152   \n",
       "\n",
       "         X7        X8        X9  ...       X41       X42       X43       X44  \\\n",
       "0  0.207755  0.760642  0.575874  ...  0.361866  1.793098 -0.631287 -0.061751   \n",
       "1  0.737594  1.321243 -0.261684  ... -0.677985 -0.165679  0.065405  0.137162   \n",
       "2  0.706179  0.394971 -0.437116  ...  1.108801  0.333791  0.282055 -1.086294   \n",
       "3  0.700909 -0.417976  1.069749  ...  0.692511 -0.350990  0.624558  0.434520   \n",
       "4  0.125137  0.493571  1.705451  ... -0.000605  1.075280  0.182281 -1.138458   \n",
       "\n",
       "        X45       X46       X47       X48       X49       X50  \n",
       "0  0.511049  0.488754 -0.612772 -0.471045 -1.139781 -0.260773  \n",
       "1  1.258197 -0.120834 -1.564834 -0.242565 -0.001827  1.187453  \n",
       "2 -0.115354  0.257857 -0.088838 -0.751231  1.450609  0.290593  \n",
       "3 -0.367409 -1.144681 -0.136524 -0.557214  0.416303  0.484495  \n",
       "4  0.106092  0.544640 -0.383487 -0.425773  2.667647 -0.050748  \n",
       "\n",
       "[5 rows x 51 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing first 5 Rows of the Training Data\n",
    "training_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "088089e4",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 256
    },
    "executionInfo": {
     "elapsed": 350,
     "status": "ok",
     "timestamp": 1699545667511,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "088089e4",
    "outputId": "b33b5aa4-1a95-4882-bada-a25e688bf152"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X7</th>\n",
       "      <th>X8</th>\n",
       "      <th>X9</th>\n",
       "      <th>...</th>\n",
       "      <th>X41</th>\n",
       "      <th>X42</th>\n",
       "      <th>X43</th>\n",
       "      <th>X44</th>\n",
       "      <th>X45</th>\n",
       "      <th>X46</th>\n",
       "      <th>X47</th>\n",
       "      <th>X48</th>\n",
       "      <th>X49</th>\n",
       "      <th>X50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7.107949</td>\n",
       "      <td>-2.047008</td>\n",
       "      <td>0.260132</td>\n",
       "      <td>-0.785152</td>\n",
       "      <td>0.384576</td>\n",
       "      <td>-0.137613</td>\n",
       "      <td>-0.364566</td>\n",
       "      <td>-1.941253</td>\n",
       "      <td>-0.108180</td>\n",
       "      <td>-0.339223</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.522194</td>\n",
       "      <td>1.861897</td>\n",
       "      <td>0.124511</td>\n",
       "      <td>1.144071</td>\n",
       "      <td>0.128179</td>\n",
       "      <td>-0.467972</td>\n",
       "      <td>-1.085601</td>\n",
       "      <td>0.659670</td>\n",
       "      <td>0.514719</td>\n",
       "      <td>0.806656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.796272</td>\n",
       "      <td>-1.354328</td>\n",
       "      <td>-1.289884</td>\n",
       "      <td>1.321533</td>\n",
       "      <td>-0.091165</td>\n",
       "      <td>-1.021874</td>\n",
       "      <td>0.686778</td>\n",
       "      <td>0.089737</td>\n",
       "      <td>-0.398371</td>\n",
       "      <td>-0.261740</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.502578</td>\n",
       "      <td>0.584476</td>\n",
       "      <td>0.680703</td>\n",
       "      <td>0.046788</td>\n",
       "      <td>0.569681</td>\n",
       "      <td>-1.099062</td>\n",
       "      <td>-0.069656</td>\n",
       "      <td>0.709273</td>\n",
       "      <td>-0.848665</td>\n",
       "      <td>0.996168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.598651</td>\n",
       "      <td>0.502205</td>\n",
       "      <td>1.062887</td>\n",
       "      <td>1.460733</td>\n",
       "      <td>-1.506403</td>\n",
       "      <td>0.721664</td>\n",
       "      <td>0.528921</td>\n",
       "      <td>-0.699541</td>\n",
       "      <td>-0.270331</td>\n",
       "      <td>-2.544812</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.125195</td>\n",
       "      <td>-1.292924</td>\n",
       "      <td>0.411785</td>\n",
       "      <td>-0.164210</td>\n",
       "      <td>-2.407403</td>\n",
       "      <td>-1.132500</td>\n",
       "      <td>0.452923</td>\n",
       "      <td>-0.945541</td>\n",
       "      <td>0.126523</td>\n",
       "      <td>-0.972075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.532953</td>\n",
       "      <td>0.222381</td>\n",
       "      <td>-0.960747</td>\n",
       "      <td>-0.113762</td>\n",
       "      <td>1.935927</td>\n",
       "      <td>0.969387</td>\n",
       "      <td>-1.641403</td>\n",
       "      <td>0.026647</td>\n",
       "      <td>0.747138</td>\n",
       "      <td>-1.571784</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.546915</td>\n",
       "      <td>-0.192517</td>\n",
       "      <td>0.603420</td>\n",
       "      <td>-0.277331</td>\n",
       "      <td>-1.451419</td>\n",
       "      <td>0.220775</td>\n",
       "      <td>0.474954</td>\n",
       "      <td>-0.160109</td>\n",
       "      <td>0.188047</td>\n",
       "      <td>-1.711229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.590685</td>\n",
       "      <td>1.209949</td>\n",
       "      <td>1.586874</td>\n",
       "      <td>-0.694784</td>\n",
       "      <td>-0.226370</td>\n",
       "      <td>-0.152108</td>\n",
       "      <td>0.772356</td>\n",
       "      <td>-0.573741</td>\n",
       "      <td>-0.992492</td>\n",
       "      <td>-0.646661</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.982236</td>\n",
       "      <td>-1.407777</td>\n",
       "      <td>0.094211</td>\n",
       "      <td>0.159960</td>\n",
       "      <td>-0.901612</td>\n",
       "      <td>-1.653122</td>\n",
       "      <td>0.393518</td>\n",
       "      <td>0.702539</td>\n",
       "      <td>0.552663</td>\n",
       "      <td>-0.773646</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 51 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          y        X1        X2        X3        X4        X5        X6  \\\n",
       "0  7.107949 -2.047008  0.260132 -0.785152  0.384576 -0.137613 -0.364566   \n",
       "1  5.796272 -1.354328 -1.289884  1.321533 -0.091165 -1.021874  0.686778   \n",
       "2  1.598651  0.502205  1.062887  1.460733 -1.506403  0.721664  0.528921   \n",
       "3  2.532953  0.222381 -0.960747 -0.113762  1.935927  0.969387 -1.641403   \n",
       "4  0.590685  1.209949  1.586874 -0.694784 -0.226370 -0.152108  0.772356   \n",
       "\n",
       "         X7        X8        X9  ...       X41       X42       X43       X44  \\\n",
       "0 -1.941253 -0.108180 -0.339223  ... -0.522194  1.861897  0.124511  1.144071   \n",
       "1  0.089737 -0.398371 -0.261740  ... -0.502578  0.584476  0.680703  0.046788   \n",
       "2 -0.699541 -0.270331 -2.544812  ... -0.125195 -1.292924  0.411785 -0.164210   \n",
       "3  0.026647  0.747138 -1.571784  ... -0.546915 -0.192517  0.603420 -0.277331   \n",
       "4 -0.573741 -0.992492 -0.646661  ... -0.982236 -1.407777  0.094211  0.159960   \n",
       "\n",
       "        X45       X46       X47       X48       X49       X50  \n",
       "0  0.128179 -0.467972 -1.085601  0.659670  0.514719  0.806656  \n",
       "1  0.569681 -1.099062 -0.069656  0.709273 -0.848665  0.996168  \n",
       "2 -2.407403 -1.132500  0.452923 -0.945541  0.126523 -0.972075  \n",
       "3 -1.451419  0.220775  0.474954 -0.160109  0.188047 -1.711229  \n",
       "4 -0.901612 -1.653122  0.393518  0.702539  0.552663 -0.773646  \n",
       "\n",
       "[5 rows x 51 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Viewing first 5 rows of the Testing Data\n",
    "testing_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "910c573c",
   "metadata": {
    "id": "910c573c"
   },
   "source": [
    "Separating the features and the target variable for the training and test sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d531681e",
   "metadata": {
    "id": "d531681e"
   },
   "outputs": [],
   "source": [
    "X_train = training_data.iloc[:, 1:].values\n",
    "y_train = training_data.iloc[:, 0].values\n",
    "\n",
    "X_test = testing_data.iloc[:, 1:].values\n",
    "y_test = testing_data.iloc[:, 0].values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77bd26bd",
   "metadata": {
    "id": "77bd26bd"
   },
   "source": [
    "## MIQP Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cd12a545",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3052672,
     "status": "ok",
     "timestamp": 1699556076984,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "cd12a545",
    "outputId": "8d6f07cb-3aa3-44a1-c9e8-5affbd50f979"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of k is: 10\n"
     ]
    }
   ],
   "source": [
    "# Define a function to perform Mixed Integer Quadratic Programming (MIQP),\n",
    "# select variables for regression, and calculate the sum of squared errors (SSE)\n",
    "def run_MIQP(X, y, k, M):\n",
    "    # Get the number of observations (n) and independent variables (m)\n",
    "    n, m = X.shape\n",
    "\n",
    "    # Initialize a new optimization model using Gurobi\n",
    "    mod = gp.Model()\n",
    "\n",
    "    # Add model variables: beta (regression coefficients) and z (binary selection variables)\n",
    "    # beta includes an intercept (beta[0]) and coefficients for each feature\n",
    "    # z is used to decide whether to include a feature (1) or not (0)\n",
    "    beta = mod.addMVar(m + 1, lb=-M, ub=M)  # Bounds for beta are set to [-M, M]\n",
    "    z = mod.addMVar(m, vtype=gp.GRB.BINARY)  # z must be binary (0 or 1)\n",
    "\n",
    "    # Define the objective function: minimize the sum of squared differences between\n",
    "    # actual values (y) and predicted values (the linear model using beta coefficients)\n",
    "    residuals = y - (beta[0] + gp.quicksum(beta[j + 1] * X[:, j] for j in range(m)))\n",
    "    mod.setObjective(residuals @ residuals)\n",
    "\n",
    "    # Add constraints to the model for each feature\n",
    "    # If a feature is not selected (z[j] is 0), its corresponding beta[j + 1] must be 0\n",
    "    # The big-M method is used to enforce this with a sufficiently large value of M\n",
    "    for j in range(m):\n",
    "        mod.addConstr(beta[j + 1] <= M * z[j])\n",
    "        mod.addConstr(beta[j + 1] >= -M * z[j])\n",
    "\n",
    "    # Add another constraint to limit the number of selected features to k\n",
    "    mod.addConstr(gp.quicksum(z) <= k)\n",
    "\n",
    "    # Configure the model to suppress output and set a maximum run time of 12 hours\n",
    "    mod.Params.OutputFlag = 0 # Supress Gurobi Output\n",
    "    mod.Params.TimeLimit = 1  # Time limit in seconds; 12 hours\n",
    "\n",
    "    # Run the optimization to solve for the beta values\n",
    "    mod.optimize()\n",
    "\n",
    "    # After optimization, calculate the predicted y values using the obtained beta coefficients\n",
    "    beta_values = beta.X  # Extract the solution for beta\n",
    "    predicted_y = beta_values[0] + np.dot(X, beta_values[1:])\n",
    "\n",
    "    # Calculate the sum of squared errors (SSE) for the predictions\n",
    "    sse = np.sum((predicted_y - y) ** 2)\n",
    "\n",
    "    # Return the SSE and the beta coefficients from the model\n",
    "    return sse, beta_values\n",
    "\n",
    "# Prepare for 10-fold cross-validation by shuffling and splitting the dataset\n",
    "kf = KFold(n_splits=10, shuffle=True)\n",
    "# Initialize a dictionary to store the cross-validation errors for each value of k\n",
    "cv_errors = {k: [] for k in range(5, 51, 5)}\n",
    "# Set a large value for M to be used in the constraints for variable selection\n",
    "M = 100\n",
    "\n",
    "# Perform cross-validation for each value of k\n",
    "for k in cv_errors.keys():\n",
    "    # For each fold in the cross-validation\n",
    "    for train_index, test_index in kf.split(X_train):\n",
    "        # Split the data into training and validation sets for this fold\n",
    "        X_train_k, X_val_k = X_train[train_index], X_train[test_index]\n",
    "        y_train_k, y_val_k = y_train[train_index], y_train[test_index]\n",
    "\n",
    "        # Run the MIQP model to get beta values using the training data for this fold\n",
    "        _, beta_values = run_MIQP(X_train_k, y_train_k, k, M)\n",
    "\n",
    "        # Predict the y values for the validation set using the obtained beta values\n",
    "        predicted_y_val = beta_values[0] + np.dot(X_val_k, beta_values[1:])\n",
    "        # Calculate the SSE on the validation set and store it\n",
    "        sse = np.sum((predicted_y_val - y_val_k) ** 2)\n",
    "        cv_errors[k].append(sse)\n",
    "\n",
    "# After cross-validation, sum the SSEs for each k across all validation sets\n",
    "summed_cv_errors = {k: np.sum(v) for k, v in cv_errors.items()}\n",
    "\n",
    "# Identify the best value of k that results in the smallest summed cross-validation error\n",
    "best_k = min(summed_cv_errors, key=summed_cv_errors.get)\n",
    "# Print out the best k value\n",
    "print(f\"The best value of k is: {best_k}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a2b7a303",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 959.798284147819,\n",
       " 10: 720.9068203678712,\n",
       " 15: 745.693817002268,\n",
       " 20: 794.5418847582558,\n",
       " 25: 777.9586738091775,\n",
       " 30: 831.9160241696253,\n",
       " 35: 821.0720177123776,\n",
       " 40: 821.0844441445112,\n",
       " 45: 856.3882471954978,\n",
       " 50: 823.9662826955013}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summed_cv_errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b845f086",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.96226156,  0.04606   ,  0.15675875,  0.21497108,  0.26037569,\n",
       "       -0.16158589, -0.14649413,  0.45692589, -0.06913725, -2.56046118,\n",
       "        0.43463165,  0.17115764, -0.33331193,  0.59136177,  0.50854258,\n",
       "       -0.13716383, -0.27058746,  0.65875151,  0.61286467,  0.77535231,\n",
       "        0.7651777 ,  0.07868605, -0.37728762, -1.25197169,  0.76623413,\n",
       "        0.06144535, -1.63879759,  0.11373491, -0.28418734,  0.38186167,\n",
       "        0.025343  ,  0.00343966,  0.52288921, -0.08309839,  1.095315  ,\n",
       "       -0.36093027,  0.22036943,  0.3752507 , -0.12831868, -1.0566418 ,\n",
       "        0.52592059, -0.56592226,  0.35476356, -0.33690854,  0.01593141,\n",
       "        1.79741527, -0.19672715,  1.00545489,  0.19354992,  0.6282277 ,\n",
       "       -0.24769282])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "91640c97",
   "metadata": {
    "id": "91640c97"
   },
   "outputs": [],
   "source": [
    "# Saving results - uncomment for future use!\n",
    "\n",
    "#summed_cv_errors = {\n",
    "    #5: 961.6415923599088,\n",
    "    #10: 734.9893099794228,\n",
    "    #15: 779.1046386645918,\n",
    "    #20: 825.1532808931182,\n",
    "    #25: 850.9513584728285,\n",
    "    #30: 837.6514753571079,\n",
    "    #35: 849.6324481600676,\n",
    "    #40: 844.0069335498347,\n",
    "    #45: 890.3595832451854,\n",
    "    #50: 866.6097783414177\n",
    "#}\n",
    "\n",
    "# Best k value\n",
    "#best_k = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5da4f0e6",
   "metadata": {
    "id": "5da4f0e6"
   },
   "outputs": [],
   "source": [
    "# Fit the MIQP using the entire training set and the best k\n",
    "_, beta_optimal = run_MIQP(X_train, y_train, best_k, M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "10225455",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1699556082737,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "10225455",
    "outputId": "28938f26-22a3-40e7-a5b9-3de6e30896c9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of squared errors on the test set is: 116.82719822762623\n"
     ]
    }
   ],
   "source": [
    "# Predict on the test set\n",
    "predicted_y_test = beta_optimal[0] + np.dot(X_test, beta_optimal[1:])\n",
    "\n",
    "# Calculate the sum of squared errors for the test set\n",
    "test_sse = np.sum((predicted_y_test - y_test) ** 2)\n",
    "print(f\"The sum of squared errors on the test set is: {test_sse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8c1df649",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.97252408,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        , -2.30820726,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "       -0.51832612, -0.20416201,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        , -1.55914318,  0.86697336,\n",
       "        0.        , -1.31191942,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.4081653 ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "        1.78147489,  0.        ,  0.88738292, -0.28229213,  0.        ,\n",
       "        0.        ])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "beta_optimal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "730135a3",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 474
    },
    "executionInfo": {
     "elapsed": 501,
     "status": "ok",
     "timestamp": 1699556083237,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "730135a3",
    "outputId": "f1fa167f-533e-4824-8891-eb1dcb35076e"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the k's and corresponding In-Sample SSE for MIQP\n",
    "k_values = list(summed_cv_errors.keys())\n",
    "in_sample_sse = list(summed_cv_errors.values())\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(k_values, in_sample_sse)\n",
    "plt.xlabel('k value')\n",
    "plt.ylabel('SSE')\n",
    "plt.title('Values of k vs In-Sample MIQP SSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a8e63638",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 479
    },
    "executionInfo": {
     "elapsed": 626509,
     "status": "ok",
     "timestamp": 1699556709745,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "a8e63638",
    "outputId": "dd3a9a6e-16c9-4519-8703-7422826a647e",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the Ks and corresponding Out-of-Sample SSE for MIQP\n",
    "\n",
    "test_sse_by_k = {}\n",
    "\n",
    "for k in range(5, 51, 5):\n",
    "    _, beta_values = run_MIQP(X_train, y_train, k, M)  # Run MIQP for the current k\n",
    "\n",
    "    # Predict on the test set using these beta values\n",
    "    predicted_y_test = beta_values[0] + np.dot(X_test, beta_values[1:])\n",
    "\n",
    "    # Calculate the sum of squared errors for the test set\n",
    "    sse = np.sum((predicted_y_test - y_test) ** 2)\n",
    "    test_sse_by_k[k] = sse  # Store the SSE for this k\n",
    "\n",
    "k_values = list(test_sse_by_k.keys())\n",
    "out_of_sample_sse = list(test_sse_by_k.values())\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(k_values, out_of_sample_sse)\n",
    "plt.xlabel('k value')\n",
    "plt.ylabel('Out-of-Sample SSE')\n",
    "plt.title('Values of k vs Out-of-Sample MIQP SSE')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3012654",
   "metadata": {
    "id": "f3012654"
   },
   "source": [
    "## Lasso Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "e6fe4889",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 273,
     "status": "ok",
     "timestamp": 1699545679242,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "e6fe4889",
    "outputId": "5e815a8b-4e09-4e0d-94ef-1345412e45fc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best value of 𝜆 is: 0.07638765995113507\n"
     ]
    }
   ],
   "source": [
    "# Generate 100 values for 𝜆\n",
    "#lambdas = np.logspace(-3, 3, 100)\n",
    "\n",
    "# Using LassoCV to perform 10-fold cross-validation.\n",
    "\n",
    "# Setting the random_state to a fixed number (in this case, 0) ensures that the results we obtain from running the models\n",
    "# will be consistent across different runs.\n",
    "\n",
    "#lasso_cv = LassoCV(alphas=lambdas, cv=10, random_state=0)\n",
    "lasso_cv = LassoCV(cv=10, random_state=0)\n",
    "\n",
    "# Fit the model to the training data.\n",
    "lasso_cv.fit(X_train, y_train)\n",
    "\n",
    "# Extracting the best model's 𝜆.\n",
    "best_lambda = lasso_cv.alpha_\n",
    "print(f\"The best value of 𝜆 is: {best_lambda}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "252dd6ec",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 569
    },
    "executionInfo": {
     "elapsed": 2350,
     "status": "ok",
     "timestamp": 1699545748783,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "252dd6ec",
    "outputId": "20a20dae-5fac-4cc7-caf3-9a35ee1c05d0"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the lambda(s) and corresponding errors for training\n",
    "lambdas = lasso_cv.alphas_  # Retrieve the lambda used by LassoCV\n",
    "sse_train_values = []\n",
    "\n",
    "for l in lambdas:\n",
    "    lasso = Lasso(alpha=l)\n",
    "    lasso.fit(X_train, y_train)\n",
    "\n",
    "    y_train_pred = lasso.predict(X_train)\n",
    "    sse = np.sum((y_train - y_train_pred) ** 2)\n",
    "    sse_train_values.append(sse)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.semilogx(lambdas, sse_train_values)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylabel('SSE')\n",
    "plt.title('Lambda vs Training SSE')\n",
    "plt.show()\n",
    "\n",
    "# Calculating the training SSE.\n",
    "#y_train_pred = lasso.predict(X_train)\n",
    "#sse_train = np.sum((y_train - y_train_pred) ** 2)\n",
    "#print(f\"The sum of squared errors on the training set is: {sse_train}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e7588063",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 132,
     "status": "ok",
     "timestamp": 1699545751592,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "e7588063",
    "outputId": "3ad56c0e-369d-4363-ef41-344993905b78"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.         -0.          0.          0.         -0.          0.\n",
      " -0.         -0.         -2.16054765  0.         -0.05964031 -0.\n",
      " -0.         -0.         -0.41912484 -0.19325408  0.          0.\n",
      " -0.          0.          0.         -0.19517759 -1.36388738  0.7425965\n",
      " -0.         -1.30481574 -0.          0.          0.05798283  0.\n",
      " -0.          0.         -0.09737839  0.28341629  0.          0.\n",
      "  0.          0.         -0.23157873  0.         -0.          0.\n",
      "  0.          0.03078191  1.56362172 -0.02160033  0.69992447 -0.09289745\n",
      "  0.          0.        ]\n"
     ]
    }
   ],
   "source": [
    "# Fitting a LASSO model to the entire training set using the best 𝜆 value.\n",
    "lasso = Lasso(alpha=best_lambda)\n",
    "lasso.fit(X_train, y_train)\n",
    "\n",
    "# Retrieving and printing the coefficients (𝛽s)\n",
    "betas = lasso.coef_\n",
    "print(betas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "91cdb0f8",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 118,
     "status": "ok",
     "timestamp": 1699561885372,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "91cdb0f8",
    "outputId": "b344b977-8fc7-4071-fdf8-4b6ea2b274a1"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 6.07686351  4.9181073   3.22777954  3.57138566 -0.41849943 -4.94878307\n",
      " -2.8218873  -1.49522305  1.38296395 -0.24746403 -1.94701631  2.70749465\n",
      "  0.64484559 -0.50918617 -0.31915912  7.37584986 -7.54781954  3.59673093\n",
      " -4.39624331 -2.98890566 -1.94423698  3.33248953 -2.42122798  1.13315219\n",
      " -2.53307168 -0.15595162 -1.62271875 -2.31420693 -3.46402012 -3.71707635\n",
      " -1.66827581 -0.07491137  1.40363987  5.45269115 -1.20270399  2.37325349\n",
      "  4.74719816  3.13015173  1.55100085  5.85587702 -0.81232674  4.66231732\n",
      " -5.71548761 -1.20927664  4.25279319  4.09734242  3.8335482   0.61787077\n",
      "  1.89407804 -1.02592954]\n"
     ]
    }
   ],
   "source": [
    "# Making a prediction on the test set and printing the predictions.\n",
    "y_test_pred = lasso.predict(X_test)\n",
    "print(y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c4fdd183",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 140,
     "status": "ok",
     "timestamp": 1699545757648,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "c4fdd183",
    "outputId": "ad6f2919-53d3-4b57-89d2-9143b396d1da",
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of squared errors on the test set is: 117.48\n"
     ]
    }
   ],
   "source": [
    "# Calculating the testing SSE.\n",
    "sse_test = np.sum((y_test - y_test_pred) ** 2)\n",
    "print(f\"The sum of squared errors on the test set is: {round(sse_test,2)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "0813cb48",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 569
    },
    "executionInfo": {
     "elapsed": 2696,
     "status": "ok",
     "timestamp": 1699545769196,
     "user": {
      "displayName": "Ethan R Wong",
      "userId": "02960486710277803186"
     },
     "user_tz": 360
    },
    "id": "0813cb48",
    "outputId": "fa13f85a-67c5-40db-dbfe-72a1d0b7d8ba"
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the lambda(s) and corresponding errors for testing\n",
    "lambdas = lasso_cv.alphas_  # Retrieving the lambda used by LassoCV\n",
    "sse_test_values = []\n",
    "\n",
    "for l in lambdas:\n",
    "    lasso = Lasso(alpha=l)\n",
    "    lasso.fit(X_train, y_train)\n",
    "\n",
    "    y_test_pred = lasso.predict(X_test)\n",
    "    sse = np.sum((y_test - y_test_pred) ** 2)\n",
    "    sse_test_values.append(sse)\n",
    "\n",
    "# Plot\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.semilogx(lambdas, sse_test_values)\n",
    "plt.xlabel('lambda')\n",
    "plt.ylabel('SSE')\n",
    "plt.title('Lambda vs Testing SSE')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [
    "f3012654"
   ],
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
